// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class FundsUnlocked extends ethereum.Event {
  get params(): FundsUnlocked__Params {
    return new FundsUnlocked__Params(this);
  }
}

export class FundsUnlocked__Params {
  _event: FundsUnlocked;

  constructor(event: FundsUnlocked) {
    this._event = event;
  }

  get amount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get forVotes(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get editionSize(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class TestingData extends ethereum.Event {
  get params(): TestingData__Params {
    return new TestingData__Params(this);
  }
}

export class TestingData__Params {
  _event: TestingData;

  constructor(event: TestingData) {
    this._event = event;
  }

  get _nftContract(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get description(): string {
    return this._event.parameters[2].value.toString();
  }

  get isPositive(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get signal(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get root(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get nullifierHash(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }

  get proof(): Array<BigInt> {
    return this._event.parameters[7].value.toBigIntArray();
  }
}

export class Voted extends ethereum.Event {
  get params(): Voted__Params {
    return new Voted__Params(this);
  }
}

export class Voted__Params {
  _event: Voted;

  constructor(event: Voted) {
    this._event = event;
  }

  get voter(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get description(): string {
    return this._event.parameters[2].value.toString();
  }

  get nulllifierHash(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get isFor(): boolean {
    return this._event.parameters[4].value.toBoolean();
  }
}

export class Vault extends ethereum.SmartContract {
  static bind(address: Address): Vault {
    return new Vault("Vault", address);
  }

  creator(): Address {
    let result = super.call("creator", "creator():(address)", []);

    return result[0].toAddress();
  }

  try_creator(): ethereum.CallResult<Address> {
    let result = super.tryCall("creator", "creator():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  editionSize(): BigInt {
    let result = super.call("editionSize", "editionSize():(uint64)", []);

    return result[0].toBigInt();
  }

  try_editionSize(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("editionSize", "editionSize():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  i_atestamint(): Address {
    let result = super.call("i_atestamint", "i_atestamint():(address)", []);

    return result[0].toAddress();
  }

  try_i_atestamint(): ethereum.CallResult<Address> {
    let result = super.tryCall("i_atestamint", "i_atestamint():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  i_eas(): Address {
    let result = super.call("i_eas", "i_eas():(address)", []);

    return result[0].toAddress();
  }

  try_i_eas(): ethereum.CallResult<Address> {
    let result = super.tryCall("i_eas", "i_eas():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  i_schemaId(): Bytes {
    let result = super.call("i_schemaId", "i_schemaId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_i_schemaId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("i_schemaId", "i_schemaId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  initialized(): boolean {
    let result = super.call("initialized", "initialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_initialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("initialized", "initialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isPayable(): boolean {
    let result = super.call("isPayable", "isPayable():(bool)", []);

    return result[0].toBoolean();
  }

  try_isPayable(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isPayable", "isPayable():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  negativeVotes(): BigInt {
    let result = super.call("negativeVotes", "negativeVotes():(uint256)", []);

    return result[0].toBigInt();
  }

  try_negativeVotes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "negativeVotes",
      "negativeVotes():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  nftContract(): Address {
    let result = super.call("nftContract", "nftContract():(address)", []);

    return result[0].toAddress();
  }

  try_nftContract(): ethereum.CallResult<Address> {
    let result = super.tryCall("nftContract", "nftContract():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  positiveVotes(): BigInt {
    let result = super.call("positiveVotes", "positiveVotes():(uint256)", []);

    return result[0].toBigInt();
  }

  try_positiveVotes(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "positiveVotes",
      "positiveVotes():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenIdVoted(param0: BigInt): boolean {
    let result = super.call("tokenIdVoted", "tokenIdVoted(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_tokenIdVoted(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("tokenIdVoted", "tokenIdVoted(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  uniqueHumanVoted(param0: BigInt): boolean {
    let result = super.call(
      "uniqueHumanVoted",
      "uniqueHumanVoted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toBoolean();
  }

  try_uniqueHumanVoted(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "uniqueHumanVoted",
      "uniqueHumanVoted(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get eas(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _worldId(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _appId(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _actionId(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _atestamint(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get schemaId(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AttestCall extends ethereum.Call {
  get inputs(): AttestCall__Inputs {
    return new AttestCall__Inputs(this);
  }

  get outputs(): AttestCall__Outputs {
    return new AttestCall__Outputs(this);
  }
}

export class AttestCall__Inputs {
  _call: AttestCall;

  constructor(call: AttestCall) {
    this._call = call;
  }

  get attestation(): AttestCallAttestationStruct {
    return changetype<AttestCallAttestationStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AttestCall__Outputs {
  _call: AttestCall;

  constructor(call: AttestCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class AttestCallAttestationStruct extends ethereum.Tuple {
  get uid(): Bytes {
    return this[0].toBytes();
  }

  get schema(): Bytes {
    return this[1].toBytes();
  }

  get time(): BigInt {
    return this[2].toBigInt();
  }

  get expirationTime(): BigInt {
    return this[3].toBigInt();
  }

  get revocationTime(): BigInt {
    return this[4].toBigInt();
  }

  get refUID(): Bytes {
    return this[5].toBytes();
  }

  get recipient(): Address {
    return this[6].toAddress();
  }

  get attester(): Address {
    return this[7].toAddress();
  }

  get revocable(): boolean {
    return this[8].toBoolean();
  }

  get data(): Bytes {
    return this[9].toBytes();
  }
}

export class MultiAttestCall extends ethereum.Call {
  get inputs(): MultiAttestCall__Inputs {
    return new MultiAttestCall__Inputs(this);
  }

  get outputs(): MultiAttestCall__Outputs {
    return new MultiAttestCall__Outputs(this);
  }
}

export class MultiAttestCall__Inputs {
  _call: MultiAttestCall;

  constructor(call: MultiAttestCall) {
    this._call = call;
  }

  get attestations(): Array<MultiAttestCallAttestationsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      MultiAttestCallAttestationsStruct
    >();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class MultiAttestCall__Outputs {
  _call: MultiAttestCall;

  constructor(call: MultiAttestCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MultiAttestCallAttestationsStruct extends ethereum.Tuple {
  get uid(): Bytes {
    return this[0].toBytes();
  }

  get schema(): Bytes {
    return this[1].toBytes();
  }

  get time(): BigInt {
    return this[2].toBigInt();
  }

  get expirationTime(): BigInt {
    return this[3].toBigInt();
  }

  get revocationTime(): BigInt {
    return this[4].toBigInt();
  }

  get refUID(): Bytes {
    return this[5].toBytes();
  }

  get recipient(): Address {
    return this[6].toAddress();
  }

  get attester(): Address {
    return this[7].toAddress();
  }

  get revocable(): boolean {
    return this[8].toBoolean();
  }

  get data(): Bytes {
    return this[9].toBytes();
  }
}

export class MultiRevokeCall extends ethereum.Call {
  get inputs(): MultiRevokeCall__Inputs {
    return new MultiRevokeCall__Inputs(this);
  }

  get outputs(): MultiRevokeCall__Outputs {
    return new MultiRevokeCall__Outputs(this);
  }
}

export class MultiRevokeCall__Inputs {
  _call: MultiRevokeCall;

  constructor(call: MultiRevokeCall) {
    this._call = call;
  }

  get attestations(): Array<MultiRevokeCallAttestationsStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      MultiRevokeCallAttestationsStruct
    >();
  }

  get values(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class MultiRevokeCall__Outputs {
  _call: MultiRevokeCall;

  constructor(call: MultiRevokeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class MultiRevokeCallAttestationsStruct extends ethereum.Tuple {
  get uid(): Bytes {
    return this[0].toBytes();
  }

  get schema(): Bytes {
    return this[1].toBytes();
  }

  get time(): BigInt {
    return this[2].toBigInt();
  }

  get expirationTime(): BigInt {
    return this[3].toBigInt();
  }

  get revocationTime(): BigInt {
    return this[4].toBigInt();
  }

  get refUID(): Bytes {
    return this[5].toBytes();
  }

  get recipient(): Address {
    return this[6].toAddress();
  }

  get attester(): Address {
    return this[7].toAddress();
  }

  get revocable(): boolean {
    return this[8].toBoolean();
  }

  get data(): Bytes {
    return this[9].toBytes();
  }
}

export class RevokeCall extends ethereum.Call {
  get inputs(): RevokeCall__Inputs {
    return new RevokeCall__Inputs(this);
  }

  get outputs(): RevokeCall__Outputs {
    return new RevokeCall__Outputs(this);
  }
}

export class RevokeCall__Inputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get attestation(): RevokeCallAttestationStruct {
    return changetype<RevokeCallAttestationStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class RevokeCall__Outputs {
  _call: RevokeCall;

  constructor(call: RevokeCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class RevokeCallAttestationStruct extends ethereum.Tuple {
  get uid(): Bytes {
    return this[0].toBytes();
  }

  get schema(): Bytes {
    return this[1].toBytes();
  }

  get time(): BigInt {
    return this[2].toBigInt();
  }

  get expirationTime(): BigInt {
    return this[3].toBigInt();
  }

  get revocationTime(): BigInt {
    return this[4].toBigInt();
  }

  get refUID(): Bytes {
    return this[5].toBytes();
  }

  get recipient(): Address {
    return this[6].toAddress();
  }

  get attester(): Address {
    return this[7].toAddress();
  }

  get revocable(): boolean {
    return this[8].toBoolean();
  }

  get data(): Bytes {
    return this[9].toBytes();
  }
}

export class SetupCall extends ethereum.Call {
  get inputs(): SetupCall__Inputs {
    return new SetupCall__Inputs(this);
  }

  get outputs(): SetupCall__Outputs {
    return new SetupCall__Outputs(this);
  }
}

export class SetupCall__Inputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }

  get _nftContract(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _creator(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _editionSize(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetupCall__Outputs {
  _call: SetupCall;

  constructor(call: SetupCall) {
    this._call = call;
  }
}

export class UnlockFundsCall extends ethereum.Call {
  get inputs(): UnlockFundsCall__Inputs {
    return new UnlockFundsCall__Inputs(this);
  }

  get outputs(): UnlockFundsCall__Outputs {
    return new UnlockFundsCall__Outputs(this);
  }
}

export class UnlockFundsCall__Inputs {
  _call: UnlockFundsCall;

  constructor(call: UnlockFundsCall) {
    this._call = call;
  }
}

export class UnlockFundsCall__Outputs {
  _call: UnlockFundsCall;

  constructor(call: UnlockFundsCall) {
    this._call = call;
  }
}

export class VoteCall extends ethereum.Call {
  get inputs(): VoteCall__Inputs {
    return new VoteCall__Inputs(this);
  }

  get outputs(): VoteCall__Outputs {
    return new VoteCall__Outputs(this);
  }
}

export class VoteCall__Inputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get description(): string {
    return this._call.inputValues[1].value.toString();
  }

  get isPositive(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }

  get signal(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get root(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get nullifierHash(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get proof(): Array<BigInt> {
    return this._call.inputValues[6].value.toBigIntArray();
  }
}

export class VoteCall__Outputs {
  _call: VoteCall;

  constructor(call: VoteCall) {
    this._call = call;
  }
}
